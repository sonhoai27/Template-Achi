{"version":3,"file":"admin.bundle.js","sources":["webpack:///./src/modules/shared/Pagination.tsx"],"sourcesContent":["import * as React from 'react';\r\ninterface Props {\r\n    totalItems: any,\r\n    onChangePage: Function,\r\n    initialPage?: number,\r\n    pageSize?: number\r\n}\r\ninterface State {\r\n    pager: any,\r\n    isOne: boolean\r\n}\r\nclass Pagination extends React.Component<Props, State> {\r\n    static defaultProps = {\r\n        initialPage: 1,\r\n        pageSize: 10\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pager: {},\r\n            isOne: false\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        // set page if items array isn't empty\r\n        if (this.props.totalItems) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // reset page if items array has changed\r\n        if (this.props.totalItems !== prevProps.totalItems) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n    setPage(page) {\r\n        let { totalItems, pageSize } = this.props;\r\n        let pager = this.state.pager;\r\n\r\n        if (page < 1 || page > pager.totalPages) {\r\n            return;\r\n        }\r\n\r\n        // get new pager object for specified page\r\n        pager = this.getPager(totalItems, page, pageSize);\r\n\r\n        // update state\r\n        this.setState({ pager });\r\n\r\n        // // call change page function in parent component\r\n        if(this.state.isOne === true && page == 1){\r\n            this.props.onChangePage(pager);\r\n        } else if(page > 1){\r\n            this.props.onChangePage(pager);\r\n            this.setState({\r\n                isOne: true\r\n            })\r\n        }\r\n    }\r\n    getPager(totalItems, currentPage, pageSize) {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || 10;\r\n\r\n        // calculate total pages\r\n        let totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        let startPage, endPage;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        let startIndex = (currentPage - 1) * pageSize;\r\n        let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        let pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems,\r\n            currentPage,\r\n            pageSize,\r\n            totalPages,\r\n            startPage,\r\n            endPage,\r\n            startIndex,\r\n            endIndex,\r\n            pages\r\n        };\r\n    }\r\n    render() {\r\n        let pager = this.state.pager;\r\n\r\n        if (!pager.pages || pager.pages.length <= 1) {\r\n            // don't display pager if there is only 1 page\r\n            return null;\r\n        }\r\n        return (\r\n            <nav aria-label=\"Page navigation\">\r\n                <ul className=\"pagination justify-content-center pagination-separate pagination-curved pagination-flat mb-1\">\r\n                    <li className={pager.currentPage === 1 ? 'page-item' : 'page-item'}>\r\n                        <a className=\"page-link\" onClick={() => this.setPage(1)}>Trang đầu</a>\r\n                    </li>\r\n                    <li className={pager.currentPage === 1 ? 'page-item' : 'page-item'}>\r\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage - 1)}>Lùi</a>\r\n                    </li>\r\n                    {pager.pages.map((page, index) =>\r\n                        <li key={index} className={pager.currentPage === page ? 'page-item active' : 'page-item'}>\r\n                            <a className=\"page-link\" onClick={() => this.setPage(page)}>{page}</a>\r\n                        </li>\r\n                    )}\r\n                    <li className={pager.currentPage === pager.totalPages ? 'page-item' : 'page-item'}>\r\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.currentPage + 1)}>Tiến</a>\r\n                    </li>\r\n                    <li className={pager.currentPage === pager.totalPages ? 'page-item' : 'page-item'}>\r\n                        <a className=\"page-link\" onClick={() => this.setPage(pager.totalPages)}>Trang cuối</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pagination"],"mappings":"AAWA","sourceRoot":""}